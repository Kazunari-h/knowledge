// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator zod {
  provider                         = "zod-prisma-types"
  output                           = "./generated/zod" // 出力ディレクトリの指定
  useMultipleFiles                 = true // スキーマを複数ファイルに分割
  writeBarrelFiles                 = false // バレルファイルの生成を無効化
  createInputTypes                 = false // 入力タイプの生成を無効化
  createModelTypes                 = true // モデルタイプの生成を有効化
  addInputTypeValidation           = true // 入力タイプに対するバリデーションの追加
  createOptionalDefaultValuesTypes = true // デフォルト値を持つフィールドをオプショナルに
  createRelationValuesTypes        = true // リレーションフィールドを含むタイプの生成
  createPartialTypes               = true // 全フィールドをオプショナルにしたパーシャルタイプの生成
  useDefaultValidators             = false // Zodのデフォルトバリデータの使用を無効化
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id       Int      @id @default(autoincrement())
  name     String?
  email    String   @unique
  password String
  type     String   @default("student")
  status   String   @default("active")
  posts    Post[]
  profile  Profile?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique
  title     String
  content   String
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])
  status    String   @default("draft")
  categoryId Int
  category  Category? @relation(fields: [categoryId], references: [id])
  publishedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tags      PostTag[]

  @@index([authorId], name: "authorId")
  @@index([categoryId], name: "categoryId")

}

model Profile {
  userId    Int      @id @default(autoincrement())
  bio       String?
  imageURL  String?
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId], name: "userId")
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     PostTag[]
  
  @@index([slug], name: "slug")
}

model PostTag {
  postId Int
  tagId  Int
  post   Post @relation(fields: [postId], references: [id])
  tag    Tag  @relation(fields: [tagId], references: [id])

  @@id([postId, tagId], name: "postId_tagId")
  @@index([postId], name: "postId")
  @@index([tagId], name: "tagId")
}
